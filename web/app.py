import streamlit as st
import pandas as pd
import io
from backend import process_txt_file, add_style, search_youglish, process_txt_file_B1


# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("Chuy·ªÉn ƒë·ªïi TXT th√†nh CSV v√† Excel")

# T·∫°o c√°c tab
tabs = st.tabs(["TXT to CSV/Excel","B1", "YouGlish Search", "Style Options"])
df = []
# Tab ƒë·∫ßu ti√™n: TXT to CSV
with tabs[0]:
    st.header("Chuy·ªÉn ƒë·ªïi TXT th√†nh CSV")
    # T·∫£i l√™n t·ªáp TXT
    uploaded_file = st.file_uploader("Ch·ªçn t·ªáp TXT", type=["txt"], key="txt_uploader")
    num_fields = st.number_input("Nh·∫≠p s·ªë tr∆∞·ªùng c·∫ßn c√≥ (ho·∫∑c ƒë·ªÉ auto)", min_value=1, value=8)
    df = pd.DataFrame({})
    # N√∫t Convert
    if st.button("Convert"):
        if uploaded_file is not None:
            # ƒê·ªçc n·ªôi dung t·ªáp TXT
            content = uploaded_file.read().decode("utf-8")

            try:
            # X·ª≠ l√Ω t·ªáp TXT v√† t·∫°o DataFrame
                df = process_txt_file(content, num_fields).dropna(axis=1, how='all')

                # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng c·ªôt
                st.write(f"D·ªØ li·ªáu s·∫Ω c√≥ {len(df.columns)} c·ªôt.")

                # Hi·ªÉn th·ªã DataFrame
                st.write("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh DataFrame:")
                st.dataframe(df)
            except ValueError as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}. Vui l√≤ng ki·ªÉm tra s·ªë l∆∞·ª£ng c·ªôt v√† d·ªØ li·ªáu trong t·ªáp TXT.")
            # style_new = st.text_input("Style", "Type")
            # st.write("The current style", style_new)
            # if style_new:
            #     df = add_style(df, style_new)
            #     st.dataframe(df)
            # else:
            #     df = add_style(df)
            #     st.dataframe(df)
            # drop = st.checkbox("Drop Columns with NaN")
            # if drop:
            #     df.dropna(axis=1, inplace=True)
            #     st.success("NaN columns have been removed.")
            #
            # st.subheader("Select Column to Add Custom Styling")
            # column_to_style = st.selectbox("Choose a column", df.columns)
            # if st.button("Apply Style"):
            #     df = add_style(df, column_to_style)
            #     st.success(f"Custom styling applied to column: {column_to_style}")
            # excel = df.to_excel(index=False, engine='openpyxl')
            # st.download_button("T·∫£i v·ªÅ Excel", excel, "data.xlsx")
            st.download_button(
                label="Download data as CSV",
                data=df.to_csv(index=False).encode('utf-8'),
                file_name=f"{uploaded_file.name.split('.')[0]}.csv",
                mime="text/csv",
            )
            # st.download_button(
            #     label="Download data as excel",
            #     data=df.to_excel(index=False).encode('utf-8'),
            #     file_name=f"{uploaded_file.name}.csv",
            #     mime="text/csv",
            # )

        else:
            st.warning("Vui l√≤ng t·∫£i l√™n t·ªáp TXT tr∆∞·ªõc khi nh·∫•n Convert.")
with tabs[1]:
    st.header("B1")

    # T·∫£i l√™n t·ªáp TXT
    uploaded_file = st.file_uploader("Ch·ªçn t·ªáp TXT", type=["txt"], key="txt_uploader_b1")
    num_fields = st.number_input("Nh·∫≠p s·ªë tr∆∞·ªùng c·∫ßn c√≥ (ho·∫∑c ƒë·ªÉ auto)", min_value=1, value=8, key="b1")

    # N√∫t Convert
    if st.button("Convert", key='convert_b1'):
        if uploaded_file is not None:
            # ƒê·ªçc n·ªôi dung t·ªáp TXT
            content = uploaded_file.read().decode("utf-8")
            df = []
            try:
                # X·ª≠ l√Ω t·ªáp TXT v√† t·∫°o DataFrame
                df = process_txt_file_B1(content, num_fields)

                # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng c·ªôt
                st.write(f"D·ªØ li·ªáu s·∫Ω c√≥ {len(df.columns)} c·ªôt.")

                # Hi·ªÉn th·ªã DataFrame
                st.write("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh DataFrame:")
                st.dataframe(df)
            except ValueError as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}. Vui l√≤ng ki·ªÉm tra s·ªë l∆∞·ª£ng c·ªôt v√† d·ªØ li·ªáu trong t·ªáp TXT.")

            st.download_button(
                label="Download data as CSV",
                data=df.to_csv(index=False).encode('utf-8'),
                file_name=f"{uploaded_file.name.split('.')[0]}.csv",
                mime="text/csv",
            )

        else:
            st.warning("Vui l√≤ng t·∫£i l√™n t·ªáp TXT tr∆∞·ªõc khi nh·∫•n Convert.")
# with tabs[2]:
#     st.header("T√¨m ki·∫øm tr√™n YouGlish")
#
#     # Input c√≥ th·ªÉ l√† text ho·∫∑c file CSV
#     search_type = st.radio("Ch·ªçn c√°ch t√¨m ki·∫øm:", ["Nh·∫≠p t·ª´", "Upload CSV"])
#
#     if search_type == "Nh·∫≠p t·ª´":
#         search_word = st.text_input("Nh·∫≠p t·ª´ c·∫ßn t√¨m", "")
#         words_to_search = [search_word] if search_word else []
#     else:
#         uploaded_file = st.file_uploader("Upload CSV file ch·ª©a danh s√°ch t·ª´", type=['csv'])
#         if uploaded_file:
#             df = pd.read_csv(uploaded_file)
#             words_to_search = df.iloc[:, 1].tolist()
#             st.write(f"ƒê√£ t·∫£i l√™n {len(words_to_search)} t·ª´")
#
#     if st.button("T√¨m ki·∫øm"):
#         if words_to_search:
#             all_results = []
#
#             # Progress bar
#             progress_bar = st.progress(0)
#             for i, word in enumerate(words_to_search):
#                 try:
#                     with st.spinner(f'ƒêang t√¨m ki·∫øm t·ª´ "{word}"...'):
#                         result = search_youglish(word)
#                         result['word'] = word
#                         all_results.append(result)
#
#                     # Update progress
#                     progress_bar.progress((i + 1) / len(words_to_search))
#
#                 except Exception as e:
#                     st.error(f"L·ªói khi t√¨m t·ª´ '{word}': {str(e)}")
#
#             if all_results:
#                 # T·∫°o DataFrame t·ª´ k·∫øt qu·∫£ YouGlish
#                 df_youglish = pd.DataFrame(all_results)
#
#                 # Join v·ªõi DataFrame g·ªëc
#                 df_merged = pd.merge(
#                     df,
#                     df_youglish,
#                     on='word',
#                     how='left'
#                 )
#
#                 # Drop c·ªôt word (v√¨ ƒë√£ c√≥ trong df g·ªëc)
#                 df_merged = df_merged.drop('word', axis=1).dropna(axis=1, how='all')
#
#                 # Hi·ªÉn th·ªã k·∫øt qu·∫£
#                 st.subheader("K·∫øt qu·∫£ sau khi join")
#                 st.dataframe(df_merged)
#
#                 # Buttons ƒë·ªÉ download
#                 col1, col2 = st.columns(2)
#
#                 with col1:
#                     st.download_button(
#                         label="üì• Download CSV",
#                         data=df_merged.to_csv(index=False).encode('utf-8'),
#                         file_name="merged_results.csv",
#                         mime="text/csv",
#                     )
#
#
#                 # Preview videos
#                 st.subheader("Preview Videos")
#                 for result in all_results:
#                     video_url = f"https://youtube.com/watch?v={result['video_id']}&t={result['start_second']}"
#                     st.write(f"### Results for '{result['word']}'")
#                     st.write(f"**{result['video_title']}**")
#                     st.write(f"üéØ C√¢u v√≠ d·ª•: {result['cloze_sentence']}")
#                     st.write(f"‚è± Th·ªùi gian: {result['start_second']}s - {result['end_second']}s")
#                     st.write(f"üîó [Xem tr√™n YouTube]({video_url})")
#                     st.write("---")
#
#             else:
#                 st.warning("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o.")
#         else:
#             st.warning("Vui l√≤ng nh·∫≠p t·ª´ ho·∫∑c upload file CSV.")
